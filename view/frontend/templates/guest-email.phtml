<?php
/**
 * ViraXpress - https://www.viraxpress.com
 *
 * LICENSE AGREEMENT
 *
 * This file is part of the ViraXpress package and is licensed under the ViraXpress license agreement.
 * You can view the full license at:
 * https://www.viraxpress.com/license
 *
 * By utilizing this file, you agree to comply with the terms outlined in the ViraXpress license.
 *
 * DISCLAIMER
 *
 * Modifications to this file are discouraged to ensure seamless upgrades and compatibility with future releases.
 *
 * @category    ViraXpress
 * @package     ViraXpress_CheckoutOptimization
 * @author      ViraXpress
 * @copyright   Â© 2024 ViraXpress (https://www.viraxpress.com/)
 * @license     https://www.viraxpress.com/license
 */

/**
 * @var \Magento\Framework\Escaper $escaper
 * @var \Magento\Framework\View\Element\Template $block
 */
$viewModel = $block->getData('viewModel');
?>
<template x-if="checkIsVirtualForEmail">
    <form x-show="guest" class="form form-login mb-10" id="guest-login"
    data-role="email-with-possible-login" novalidate="novalidate">
        <fieldset id="customer-email-fieldset" class="fieldset"
        x-data="guestCheckout()" x-on:click.away="isTooltipVisible = false">
            <div class="field required">
                <label class="label block text-sm leading-6 text-gray-900" for="customer-email">
                    <span><?= $escaper->escapeHtml(__('Email Address')) ?></span>
                    <span class="text-required ml-1">*</span>
                </label>
                <div class="control _with-tooltip mt-1 flex justify-start items-center gap-5">
                    <div class="w-full max-w-[434px]">
                        <!-- Email input with data validation -->
                        <input x-bind:class="`input-text block w-full rounded-md border-0 py-2.5 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-primary sm:text-sm sm:leading-6 ${errorMessage == '' ? 'valid' : 'mage-error'}`"
                        x-model="email" @input="validateEmail" @change="isEmailAvailable"
                        x-on:input.debounce="validate($event)"
                        type="email" name="username" id="customer-email"
                        x-bind:data-validate="JSON.stringify({ required: true })"
                        placeholder="Enter your email">
                        <div id="customer-email-error" class="mage-error text-sm text-error mt-2" x-show="errorMessage"
                        x-text="errorMessage"></div>
                        <div class="field-error text-sm text-error mt-2" x-show="errors['username']" x-text="errors['username']"></div>
                    </div>
                    <div>
                        <!-- Tooltip Wrapper -->
                        <div x-bind:class="`field-tooltip toggle relative ${isTooltipVisible == true ? '_active' : ''}`">
                            <!-- Tooltip Icon Trigger -->
                            <span
                            x-bind:class="`field-tooltip-action action-help ${isTooltipVisible == true ? '_active' : ''}`"
                            tabindex="0" @click="toggleTooltip" x-bind:aria-labelledby="'tooltip-label'"
                            x-bind:aria-expanded="isTooltipVisible" role="button">
                                 <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                  <path stroke-linecap="round" stroke-linejoin="round" d="m11.25 11.25.041-.02a.75.75 0 0 1 1.063.852l-.708 2.836a.75.75 0 0 0 1.063.853l.041-.021M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Zm-9-3.75h.008v.008H12V8.25Z" />
                                </svg>
                            </span>
                            <!-- Tooltip Content -->
                            <div class="field-tooltip-content absolute top-5 w-max p-4 bg-white shadow-lg border border-gray-100 rounded text-base right-0 z-50" x-show="isTooltipVisible" x-transition.origin.top.right x-bind:aria-hidden="!isTooltipVisible">
                                <?= $escaper->escapeHtml(__("We'll send your order confirmation here.")) ?>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Account creation note -->
                <div class="note text-sm mt-2" x-show="showPasswordField" x-transition>
                    <?= $escaper->escapeHtml(
                        __('You can create an account after checkout.')
                    ) ?>
                </div>
            </div>
            <fieldset class="fieldset hidden-fields" x-show="!showPasswordField" style="">
                <div class="field mt-5">
                    <label class="label block text-sm leading-6 text-gray-900" for="customer-password">
                        <span><?= $escaper->escapeHtml(__('Password')) ?></span>
                        <span class="text-required ml-1">*</span>
                    </label>
                    <div class="control w-full max-w-[434px]">
                        <input class="input-text block w-full rounded-md border-0 py-2.5 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-primary sm:text-sm sm:leading-6" :placeholder="'Password'"
                        type="password" name="password" id="customer-password"
                        x-on:input.debounce="validate($event)"
                        x-bind:data-validate="JSON.stringify({ required: true })" autocomplete="off">
                        <span class="note text-sm mt-2 inline-block">
                            <?= $escaper->escapeHtml(
                                __('You already have an account with us. Sign in or continue as guest.')
                            ) ?></span>
                    </div>
                    <div class="field-error text-sm text-error mt-2" x-show="errors['password']" x-text="errors['password']"></div>
                </div>
                <div class="actions-toolbar inline-flex items-center gap-6 mt-5">
                    <input name="captcha_form_id" type="hidden" value="user_login">
                    <input name="context" type="hidden" value="checkout">
                    <div class="primary">
                        <button type="submit" :disabled="errorMessage != ''" @click.prevent="triggerGuestLogin('guest-login')"
                        class="action login primary primary-btn">
                            <span><?= $escaper->escapeHtml(__('Login')) ?></span>
                        </button>
                    </div>
                    <div class="secondary">
                        <a class="action remind text-primary text-sm hover:underline" x-bind:href="config.forgotPasswordUrl">
                            <span><?= $escaper->escapeHtml(__('Forgot Your Password?')) ?></span>
                        </a>
                    </div>
                </div>
            </fieldset>
        </fieldset>
        <script>
            function guestCheckout() {
                return {
                    email: '',
                    errors: {},
                    errorMessage: '',
                    isTooltipVisible: false,
                    showPasswordField: true,
                    storeCode: '<?= $escaper->escapeHtmlAttr($viewModel->getCurrentStoreCode()) ?>',
                    message : 'Required field.',
                    init() {
                        this.getGuestEmail();
                    },
                    validateEmail() {
                        const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                        this.errorMessage = emailPattern.test(this.email) ? '' : 'Please enter a valid email address (Ex: johndoe@domain.com).';
                    },
                    validate(event) {
                        const element = event.target;
                        const validation = JSON.parse(element.getAttribute('data-validate') || '{}');
                        if (validation['required']) {
                            if (validation['required'] && !element.value.trim()) {
                                this.errors[element.name] = this.message;
                            } else if (validation['max_text_length'] && element.value.length > validation['max_text_length']) {
                                this.errors[element.name] = 'Text is too long';
                            } else if (validation['min_text_length'] && element.value.length < validation['min_text_length']) {
                                this.errors[element.name] = 'Text is too short';
                            } else {
                                delete this.errors[element.name];
                            }
                        }
                    },
                    toggleTooltip() {
                        this.isTooltipVisible = !this.isTooltipVisible;
                    },
                    triggerGuestLogin(formId) {
                        const form = document.getElementById(formId);
                        let valid = true;
                        this.errors = {};
                        const elements = form.elements;
                        for (let element of elements) {
                            const validation = JSON.parse(element.getAttribute('data-validate') || '{}');
                            if (validation['required']) {
                                if (validation['required'] && !element.value) {
                                    valid = false;
                                    this.errors[element.name] = this.message;
                                } else {
                                    delete this.errors[element.name];
                                }
                            }
                        }
                        const formData = {};
                        for (let element of elements) {
                            if (element.name) formData[element.name] = element.value;
                        }
                        if (valid) this.processGuestLogin(formData);
                    },
                    async processGuestLogin(formData) {
                        const url = `${BASE_URL}customer/ajax/login`;
                        try {
                            const response = await fetch(url, {
                                method: "POST",
                                body: JSON.stringify(formData),
                                headers: {
                                    "Content-Type": "application/json",
                                    "X-Requested-With": "XMLHttpRequest",
                                },
                                credentials: "include",
                            });
                            if (response.ok) {
                                window.location.href = `${BASE_URL}checkout`
                            } else {
                                console.error("Login failed:", response);
                            }
                        } catch (error) {
                            console.error("Fetch error:", error);
                        }
                    },
                    getGuestEmail () {
                        let e = localStorage.getItem('vira-mage-cache-storage');
                        if (e) {
                            try {
                                const checkoutData = JSON.parse(e); // Parse the JSON string
                                if (checkoutData && checkoutData['checkout-data'] && checkoutData['checkout-data']['guestEmail']) {
                                    this.email = checkoutData['checkout-data']['guestEmail'];
                                    var inter = setInterval(() => { clearInterval(inter); this.isEmailAvailable();}, 1500);
                                }
                            } catch (error) {
                                console.error('Error parsing vira-mage-cache-storage:', error);
                            }
                        } else {
                            console.log('vira-mage-cache-storage is empty or not found in localStorage.');
                        }
                    },
                    isEmailAvailable(event) {
                        if (this.errorMessage == '' && document.querySelector('#customer-email').value != '') {
                            let checkoutData = {};
                            const storageData = localStorage.getItem('vira-mage-cache-storage');
                            checkoutData = JSON.parse(storageData);
                            checkoutData['checkout-data'] = checkoutData['checkout-data'] || {};
                            checkoutData['checkout-data']['guestEmail'] = this.email;
                            localStorage.setItem('vira-mage-cache-storage', JSON.stringify(checkoutData));
                            const url = `/rest/${this.storeCode}/V1/customers/isEmailAvailable`;
                            const requestBody = JSON.stringify({ customerEmail: this.email });
                            fetch(url, {
                                method: 'POST',
                                headers: {'Content-Type': 'application/json'},
                                body: requestBody
                            }).then(response => response.json())
                            .then(data => {
                                this.showPasswordField = data; /* change value to false,when you got the idea for login and load the checkout */
                            }).catch(error => {
                                console.error('Error fetching email:', error);
                            });
                        } else {
                            this.validateEmail();
                        }
                    },
                };
            }
        </script>
    </form>
</template>
